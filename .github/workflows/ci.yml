name: GCS CLI Testing CI/CD

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:  # Allow manual trigger

jobs:
  test:
    name: Run GCS CLI Tests
    runs-on: ubuntu-22.04

    env:
      GCS_PROJECT_ID: ${{ secrets.GCS_PROJECT_ID }}
      GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
      GCS_TEST_FILE_PREFIX: test-ci-

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'maven'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCS_PROJECT_ID }}

      - name: Authenticate to Google Cloud
        run: |
          # Write service account key to a file
          echo '${{ secrets.GCP_SA_KEY }}' > $HOME/gcp-sa-key.json
          # Authenticate gcloud with the service account key file (required for sign-url)
          gcloud auth activate-service-account --key-file=$HOME/gcp-sa-key.json
          # Set the project
          gcloud config set project ${{ secrets.GCS_PROJECT_ID }}
          # Set GOOGLE_APPLICATION_CREDENTIALS to point to the key file
          echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcp-sa-key.json" >> $GITHUB_ENV

      - name: Verify gcloud authentication
        run: |
          echo "=== Verifying gcloud authentication ==="
          gcloud auth list
          gcloud config list
          echo ""
          echo "=== Testing bucket access ==="
          gcloud storage ls gs://${{ secrets.GCS_BUCKET_NAME }} || echo "Bucket check complete"
          echo ""
          echo "=== Testing signed URL capability ==="
          # Create a test file to verify sign-url works
          echo "test" > /tmp/test-auth.txt
          gcloud storage cp /tmp/test-auth.txt gs://${{ secrets.GCS_BUCKET_NAME }}/test-auth-verify.txt
          # Try to generate a signed URL (this will fail if auth is wrong)
          gcloud storage sign-url gs://${{ secrets.GCS_BUCKET_NAME }}/test-auth-verify.txt --duration=1m
          # Cleanup test file
          gcloud storage rm gs://${{ secrets.GCS_BUCKET_NAME }}/test-auth-verify.txt
          rm /tmp/test-auth.txt
          echo "‚úì Authentication verified successfully"

      - name: Install Playwright system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libdbus-glib-1-2

      - name: Install Playwright browsers
        run: |
          mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install firefox"
          mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install-deps firefox"

      - name: Run tests
        run: |
          mvn clean test
        continue-on-error: false

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            target/surefire-reports/
            target/screenshots/
          retention-days: 30

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: target/surefire-reports/*.xml
          retention-days: 30

      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: target/surefire-reports/TEST-*.xml
          check_name: Test Results

      - name: Comment PR with test results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const testResultsPath = 'target/surefire-reports/TEST-TestSuite.xml';

            let comment = '## üß™ Test Results\n\n';

            try {
              const testResults = fs.readFileSync(testResultsPath, 'utf8');
              const testsMatch = testResults.match(/tests="(\d+)"/);
              const failuresMatch = testResults.match(/failures="(\d+)"/);
              const errorsMatch = testResults.match(/errors="(\d+)"/);
              const skippedMatch = testResults.match(/skipped="(\d+)"/);

              const tests = testsMatch ? testsMatch[1] : '?';
              const failures = failuresMatch ? failuresMatch[1] : '?';
              const errors = errorsMatch ? errorsMatch[1] : '?';
              const skipped = skippedMatch ? skippedMatch[1] : '?';
              const passed = tests - failures - errors - skipped;

              const status = (failures === '0' && errors === '0') ? '‚úÖ PASSED' : '‚ùå FAILED';

              comment += `**Status:** ${status}\n\n`;
              comment += `| Metric | Count |\n`;
              comment += `|--------|-------|\n`;
              comment += `| ‚úÖ Passed | ${passed} |\n`;
              comment += `| ‚ùå Failed | ${failures} |\n`;
              comment += `| ‚ö†Ô∏è Errors | ${errors} |\n`;
              comment += `| ‚è≠Ô∏è Skipped | ${skipped} |\n`;
              comment += `| üìä Total | ${tests} |\n`;
            } catch (error) {
              comment += '‚ö†Ô∏è Unable to parse test results. Check the workflow logs for details.\n';
            }

            comment += '\n[View detailed test reports in artifacts](../actions/runs/${{ github.run_id }})';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Cleanup test files
        if: always()
        run: |
          echo "Cleaning up test files from GCS bucket..."
          gcloud storage rm gs://${{ secrets.GCS_BUCKET_NAME }}/test-ci-* --recursive || echo "Cleanup complete (no files to remove or error occurred)"

      - name: Cleanup service account key
        if: always()
        run: |
          # Remove the service account key file
          rm -f $HOME/gcp-sa-key.json

      - name: Notify on failure
        if: failure()
        run: |
          echo "::error::Tests failed! Check the test reports for details."
          exit 1

  deploy:
    name: Deploy Documentation
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to GitHub Pages (optional)
        run: |
          echo "üìù Documentation deployment can be configured here"
          echo "For now, test reports are available in artifacts"
